<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hantele.demo.dao.BorrowMapper">
  <resultMap id="BaseResultMap" type="com.hantele.demo.entity.Borrow">
    <constructor>
      <idArg column="borrow_ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="borrtime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="borrday" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="borrbil" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="userid" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="bookid" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="state" javaType="java.lang.String" jdbcType="CHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    borrow_ID, borrtime, borrday, borrbil, userid, bookid, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrow
    where borrow_ID = #{borrowId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from borrow
    where borrow_ID = #{borrowId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hantele.demo.entity.Borrow">
    insert into borrow (borrow_ID, borrtime, borrday, 
      borrbil, userid, bookid, 
      state)
    values (#{borrowId,jdbcType=INTEGER}, #{borrtime,jdbcType=TIMESTAMP}, #{borrday,jdbcType=TIMESTAMP}, 
      #{borrbil,jdbcType=DOUBLE}, #{userid,jdbcType=INTEGER}, #{bookid,jdbcType=INTEGER}, 
      #{state,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hantele.demo.entity.Borrow">
    insert into borrow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="borrowId != null">
        borrow_ID,
      </if>
      <if test="borrtime != null">
        borrtime,
      </if>
      <if test="borrday != null">
        borrday,
      </if>
      <if test="borrbil != null">
        borrbil,
      </if>
      <if test="userid != null">
        userid,
      </if>
      <if test="bookid != null">
        bookid,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="borrowId != null">
        #{borrowId,jdbcType=INTEGER},
      </if>
      <if test="borrtime != null">
        #{borrtime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrday != null">
        #{borrday,jdbcType=TIMESTAMP},
      </if>
      <if test="borrbil != null">
        #{borrbil,jdbcType=DOUBLE},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        #{bookid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hantele.demo.entity.Borrow">
    update borrow
    <set>
      <if test="borrtime != null">
        borrtime = #{borrtime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrday != null">
        borrday = #{borrday,jdbcType=TIMESTAMP},
      </if>
      <if test="borrbil != null">
        borrbil = #{borrbil,jdbcType=DOUBLE},
      </if>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        bookid = #{bookid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=CHAR},
      </if>
    </set>
    where borrow_ID = #{borrowId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hantele.demo.entity.Borrow">
    update borrow
    set borrtime = #{borrtime,jdbcType=TIMESTAMP},
      borrday = #{borrday,jdbcType=TIMESTAMP},
      borrbil = #{borrbil,jdbcType=DOUBLE},
      userid = #{userid,jdbcType=INTEGER},
      bookid = #{bookid,jdbcType=INTEGER},
      state = #{state,jdbcType=CHAR}
    where borrow_ID = #{borrowId,jdbcType=INTEGER}
  </update>
</mapper>